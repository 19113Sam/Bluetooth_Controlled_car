#include <Servo.h>

Servo s;
#define A_M1 3
#define B_M1 6
#define A_M2 10
#define B_M2 11
int state = 0;
const int trig =9;
const int echo =5;
long t;
int dist;
int servo=7;
int i;

void setup() {
  pinMode(A_M1, OUTPUT);
  pinMode(B_M1, OUTPUT);
  pinMode(A_M2, OUTPUT);
  pinMode(B_M2, OUTPUT);
  digitalWrite(A_M1, LOW);
  digitalWrite(B_M1, LOW);
  digitalWrite(A_M2, LOW);
  digitalWrite(B_M2, LOW);
  pinMode(trig, OUTPUT);
  pinMode(echo, INPUT);
  s.attach(servo);
  Serial.begin(9600); // Default communication rate of the Bluetooth module
}

void loop() {
  digitalWrite(trig, LOW);
    delay(2);
    
    digitalWrite(trig,HIGH);
    delay(10);
    digitalWrite(trig,LOW);
    
    t=pulseIn(echo,HIGH);
    dist=t*0.034/2;
  
  
  if(Serial.available() > 0){ // Checks whether data is comming from the serial port
    state = Serial.read(); // Reads the data from the serial port
 }

 if (state == '0') {
  digitalWrite(A_M1, LOW); 
  digitalWrite(B_M1, LOW);
  digitalWrite(A_M2, LOW);
  digitalWrite(B_M2, LOW);
  Serial.println("STOP"); 
  state = 0;
 }
 else if (state == '1') {
  digitalWrite(A_M1, LOW); 
  analogWrite(B_M1, 100);
  digitalWrite(A_M2, LOW);
  analogWrite(B_M2, 150);
  Serial.println("FORWARD");
  state = 0;
 } 
 else if (state == '2') {
  analogWrite(A_M1, 100); 
  digitalWrite(B_M1, LOW);
  analogWrite(A_M2, 150);
  digitalWrite(B_M2, LOW);
  Serial.println("BACKWARD");;
  state = 0;
 } 
 else if (state == '3') {
  analogWrite(A_M1, 150); 
  digitalWrite(B_M1, LOW);
  digitalWrite(B_M2, LOW);
  analogWrite(A_M2, 150);
  Serial.println("LEFT");;
  state = 0;
 } 
 else if (state == '4') {
  analogWrite(B_M2, 100); 
  digitalWrite(A_M2, LOW);
  digitalWrite(A_M1, LOW);
  analogWrite(B_M1, 200);
  Serial.println("RIGHT");;
  state = 0;
 } 
 else if(dist<=10){
    analogWrite(B_M2, 255); 
  digitalWrite(A_M2, LOW);
  digitalWrite(A_M1, LOW);
  analogWrite(B_M1, 150);
  Serial.println("OBSTACLE");;
   
 
  
  
  }
 
else if(dist>10){
  analogWrite(B_M2, 255); 
  digitalWrite(A_M2, LOW);
  digitalWrite(A_M1, LOW);
  analogWrite(B_M1, 255);
}
 
}